// WeakMapとは、弱い参照でオブジェクトを保持するコレクション
// キーは必ずオブジェクトになる
// WeakMapを使うことで、オブジェクトと値を対で管理することができる
const wm = new WeakMap();

let o = {};
// WeakMapインスタンス.set(キー(オブジェクト), 値)で値をセットできる
wm.set(o, 'value1');

/**
 * Mapの場合はキーのオブジェクトが削除されても値は消えないが、
 * WeakMapを使うと、キーのオブジェクトが削除されると、
 * WeakMapに格納されているペアになっている値も削除される
 * その削除は、定期的に、自動的にJSエンジンによって行われる
 * 値を代入した段階でオブジェクトの参照は削除され
 * 後からオブジェクトを代入しても以前のオブジェクトはもう参照できない
 * そうすると、setされた値は2度と参照できないため、キーと値のペアは自動的に削除される
 * この削除される仕組みをガベージコレクションという
 * JSエンジンでは定期的にガベージコレクションが働いており、
 * 参照不可能な変数や関数を定期的に削除してメモリを整理している
 *
 * また、WeakMapはfor...ofのような反復処理はできないため、
 * 反復処理をしたい場合はMapを使う
 */

// o = null;
// o = {};

// hasメソッドを使うことで、oというキーがWeakMapにあるかどうかを真偽値で判定する
// console.log(wm.has(o));

// deleteメソッドを使うと、意図的に引数に指定したkeyとvalueのペアを削除することができる
// console.log(wm.delete(o));

// getメソッドで値を取得できる
console.log(wm.get(o)); // value1
